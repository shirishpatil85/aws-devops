********************** Parameters are input from console. They are assigned as values to the properties.

Parameters:	
	Name:	
	Type:	
	Default:	
	Description:	
	Allowed Values: -a -b -c	
	NoEcho: true	
	AllowedPattern:	
	ConstraintDescription:	
	MinLength:	
	MaxLength:


********************** Mappings are used to create maps of two property values which are linked together.

Mappings: 
  RegionMap: 
    us-east-1: 
      HVM64: ami-0ff8a91507f77f867
      HVMG2: ami-0a584ac55a7631c0c


********************** Condition is used to for conditional creation or configuration of resources.

Conditions:
   CreateBucket: !Not 
     - !Equals 
       - !Ref BucketName
       - ''


********************** Cloud resources.

Resources:	
   Name:
      Type: AWS::
      Condition: condition1
      Properties:
          Propname1: !Ref parameter. 
          Propname2: !GetAtt otherresource.attribute
          Propname3: { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "HVM64"]},


********************** Output are used in cross stack

Outputs:
   VPCId(Logical ID):
     Description: Security Group ID of the newly created Security Group
     Value:
        Fn::GetAtt:
          - Property1
          - Property2
      Export:
      	  Name: !Sub ${AWS::StackName}-VPCID
      	

---------- Intrinsic functions

Parameter 		- Custom user defined values
Pseudo 			- Values from current template
Substitue function 	- Value of parameter or pseudo parameter
Ref function 		- Value of parameter
Import function 	- Exported output value from other stacks

Properties:
	Value: !Sub ${AWS::StackName}-Public-A
	VpcId: !Ref VPC
	Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
	Value: Fn::ImportValue:
  		!Sub "${NetworkStack}-SubnetID"

---------- IAM Policy 

Effect:Allow
Action:  ["Create/Modify/Delete/List/Desribe/Read/Write..", "ec2:*" , sts:AssumeRole]
Principal: [arn of iam user , role , service ]  // Attached to resource
Resource: ["arn:aws:s3:::conf-*" , s3:*]   // Attached to entity
Condition: [aws: RequestedRegion”: “ap-south-1” ]

# Tag based access

aws:ResourceTag/key-name
aws:RequestTag/key-name
aws:PrincipalTag/key-name

Condition:
   StringEquals:
   	aws:ResourceTag/project: "${aws:PrincipalTag/project}"
	
# sts:AssumeRole
Use API along with these to access using sts obtained by calling - GetSessionToken API
aws_access_key_id, aws_secret_access_key , session_token
